---
description: Tailwind CSS usage patterns and conventions for StoryCMS Kit
globs: src/frontend/**/*.{vue,css}
alwaysApply: false
---
# Tailwind CSS Development Rules

## Class Organization

### Utility Class Order
- Layout: `grid`, `flex`, `block`, `inline`
- Spacing: `p-`, `m-`, `gap-`, `space-`
- Sizing: `w-`, `h-`, `min-`, `max-`
- Typography: `text-`, `font-`, `leading-`
- Backgrounds: `bg-`, `border-`
- Effects: `shadow-`, `opacity-`, `transition-`
- Interactivity: `hover:`, `focus:`, `active:`

### Responsive Design
- Use mobile-first approach
- Apply base styles first, then responsive variants
- Use `sm:`, `md:`, `lg:`, `xl:` prefixes
- Test on multiple screen sizes

## Custom Classes

### Component Classes
- Use `@layer components` for reusable component styles
- Define custom classes in `src/frontend/index.css`
- Use semantic class names
- Follow existing patterns like `input-field`, `btn`, `icon`

### Custom Class Examples
```css
@layer components {
  .input-label {
    @apply mb-1 text-sm font-medium leading-5 text-gray-900;
  }
  
  .input-field {
    @apply block w-full rounded-md border border-gray-300 px-3 py-3 text-sm font-normal leading-5 text-gray-900 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm;
  }
  
  .btn {
    @apply inline-flex cursor-pointer items-center justify-center rounded-md border border-transparent px-3 py-2 text-sm font-medium leading-5 shadow hover:opacity-80 hover:shadow-md active:opacity-80;
  }
}
```

## Color System

### Brand Colors
- Use custom color palette defined in `tailwind.config.js`
- Primary: `accent` (#39CCFB)
- Secondary: `accent-green` (#34D399)
- Error: `error` (red-500)
- Success: `green-400`

### Color Usage
```vue
<!-- Use semantic color names -->
<div class="bg-accent text-white">Primary button</div>
<div class="bg-accent-green text-white">Success button</div>
<div class="text-error">Error message</div>
<div class="bg-green-400">Success state</div>
```

## Spacing System

### Consistent Spacing
- Use Tailwind's spacing scale (0.25rem increments)
- Common spacing values: `p-2`, `p-4`, `p-6`, `p-8`
- Use `gap-` for flex and grid layouts
- Use `space-` for child element spacing

### Spacing Examples
```vue
<div class="p-8">Large padding</div>
<div class="px-4 py-2">Horizontal and vertical padding</div>
<div class="space-y-4">Vertical spacing between children</div>
<div class="gap-4">Grid/flex gap</div>
```

## Typography

### Font Families
- Primary: Inter (sans-serif)
- Secondary: Amiri (serif for Arabic/RTL)
- Use `font-sans` for Inter
- Use `font-serif` for Amiri

### Text Sizing
- Use consistent text sizes: `text-sm`, `text-base`, `text-lg`
- Use `font-medium` for labels
- Use `font-normal` for body text
- Use `leading-5` for consistent line height

## Layout Patterns

### Grid Layouts
- Use CSS Grid for complex layouts
- Use `grid-cols-*` for column definitions
- Use `col-span-*` for column spanning
- Use `grid-rows-*` for row definitions

### Flexbox Layouts
- Use Flexbox for simple layouts
- Use `flex` for flex containers
- Use `items-center` for vertical alignment
- Use `justify-center` for horizontal alignment

### Responsive Layouts
```vue
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
  <!-- Responsive grid -->
</div>

<div class="flex flex-col md:flex-row items-center">
  <!-- Responsive flex -->
</div>
```

## Interactive States

### Hover States
- Use `hover:` prefix for hover effects
- Common patterns: `hover:bg-gray-100`, `hover:opacity-80`
- Use `hover:shadow-md` for elevation changes

### Focus States
- Use `focus:` prefix for focus effects
- Use `focus:ring-2` for focus rings
- Use `focus:outline-none` to remove default outline
- Use `focus:border-indigo-500` for input focus

### Active States
- Use `active:` prefix for active effects
- Use `active:opacity-80` for button presses

## Transitions

### Transition Classes
- Use `transition-all` for smooth transitions
- Use `duration-200` for standard duration
- Use `ease-in-out` for smooth easing
- Use `duration-75` for quick transitions

### Transition Examples
```vue
<button class="transition-all duration-200 ease-in-out hover:bg-gray-100">
  Smooth hover transition
</button>

<div class="transition-all duration-75">
  Quick transition
</div>
```

## Form Styling

### Input Fields
- Use `input-field` class for consistent styling
- Use `input-label` class for labels
- Use `border-error` for error states
- Use `focus:border-indigo-500` for focus states

### Form Layout
```vue
<div class="space-y-4">
  <label class="input-label">Field Label</label>
  <input class="input-field" />
  <p class="text-sm text-error">Error message</p>
</div>
```

## Debugging

### Debug Classes
- Use `debug` class for development debugging
- Debug class applies red borders to all children
- Remove debug classes before production

### Debug Example
```vue
<div class="debug">
  <!-- All children will have red borders -->
</div>
```

## Performance

### Class Optimization
- Avoid arbitrary values when possible
- Use Tailwind's built-in utilities
- Minimize custom CSS
- Use PurgeCSS for production builds

### Best Practices
- Use semantic class names
- Keep classes organized and readable
- Use responsive design patterns
- Test on multiple screen sizes
- Follow existing design patterns
