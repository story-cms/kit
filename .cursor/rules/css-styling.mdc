---
description: CSS styling patterns and conventions for StoryCMS Kit
globs: src/frontend/**/*.css
alwaysApply: false
---

# CSS Styling Development Rules

## CSS Architecture

### Layer Organization

- Use `@tailwind base` for base styles
- Use `@tailwind components` for component styles
- Use `@tailwind utilities` for utility classes
- Use `@layer` directives for custom styles

### File Structure

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  /* Base styles, CSS custom properties */
}

@layer components {
  /* Component-specific styles */
}

@layer utilities {
  /* Custom utility classes */
}
```

## CSS Custom Properties

### Variable Definition

- Define CSS custom properties in `:root`
- Use semantic names for variables
- Use kebab-case for property names
- Group related variables together

### Variable Usage

```css
@layer base {
  :root {
    --primary-color: #39ccfb;
    --secondary-color: #34d399;
    --font-family-sans: 'Inter', sans-serif;
    --font-family-serif: 'Amiri', serif;
  }
}
```

## Font Imports

### Google Fonts

- Import fonts in `@layer base`
- Use `@import url()` for Google Fonts
- Load fonts with specific weights
- Consider font display optimization

### Font Import Example

```css
@layer base {
  @import url('https://fonts.googleapis.com/css2?family=Amiri&display=swap');
  @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap');
}
```

## Component Styles

### Component Class Patterns

- Use Tailwind's `@apply` directive sparingly
- Keep components focused and reusable

## Layout Utilities

### Grid Utilities

- Use CSS Grid for complex layouts
- Create utility classes for common grid patterns
- Use subgrid for nested layouts

### Grid Examples

```css
@layer components {
  .row-subgrid {
    @apply row-[span_100] grid grid-rows-[subgrid];
  }
}
```

## State Management

### Interactive States

- Use Tailwind utilities for state styling
- Create consistent state patterns
- Use transitions for smooth state changes

### State Examples

```css
@layer components {
  .active {
    @apply bg-blue-50 transition-all duration-200 ease-in-out;
  }
}
```

## Debugging

### Development Utilities

- Create debug utilities for development
- Use CSS custom properties for debugging
- Remove debug styles for production

## Performance

### CSS Optimization

- Minimize custom CSS
- Use Tailwind utilities when possible
- Optimize font loading
- Use efficient selectors

### Best Practices

- Keep styles modular and reusable
- Use semantic class names
- Follow existing patterns
- Test across different browsers
- Consider accessibility in styling
- Use CSS custom properties for theming
- Optimize for performance

## Responsive Design

### Mobile-First Approach

- Start with mobile styles
- Add responsive variants with Tailwind
- Test on multiple screen sizes
- Use flexible layouts

### Responsive Patterns

```css
@layer components {
  .responsive-container {
    @apply px-4 md:px-6 lg:px-8;
  }

  .responsive-grid {
    @apply grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3;
  }
}
```

## Accessibility

### Focus Management

- Ensure proper focus indicators
- Use high contrast colors
- Maintain keyboard navigation
- Test with screen readers

### Accessibility Examples

```css
@layer components {
  .focus-visible {
    @apply focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2;
  }
}
```
