{{{
  exports({ to: app.makePath('app/models/user.ts') })
}}}
import { DateTime } from 'luxon';
import { compose } from '@adonisjs/core/helpers';
import { BaseModel, column, computed } from '@adonisjs/lucid/orm';
import hash from '@adonisjs/core/services/hash';
import { withAuthFinder } from '@adonisjs/auth/mixins/lucid';
import type { UserMeta } from '@story-cms/kit';

const AuthFinder = withAuthFinder(() => hash.use('scrypt'), {
  uids: ['email'],
  passwordColumnName: 'password',
});

export default class User extends compose(BaseModel, AuthFinder) {
  public static roles = ['admin', 'editor'] as const;

  @column({ isPrimary: true })
  declare id: number;

  @column()
  declare name: string;

  @column()
  declare email: string;

  @column({ serializeAs: null })
  declare password: string;

  @column()
  declare language: string | null;

  @column({ serializeAs: null })
  declare rememberMeToken?: string;

  @column({ serializeAs: null })
  declare resetToken?: string;

  @column({ serializeAs: null })
  declare resetTokenCreatedAt?: DateTime;

  @column()
  declare role: string;

  @column.dateTime({ autoCreate: true })
  declare createdAt: DateTime;

  @column.dateTime({ autoCreate: true, autoUpdate: true })
  declare updatedAt: DateTime | null;

  public defaultLanguage(storySourceLanguage: string = 'en'): string {
    if (this.language === '*' || this.language === null) return storySourceLanguage;

    return this.language!;
  }

  @computed()
  public get isManager(): boolean {
    return this.language === '*';
  }

  @computed()
  public get isAdmin(): boolean {
    return this.role === 'admin';
  }

  @computed()
  public get initials(): string {
    const parts = this.name
      .trim()
      .split(' ')
      .map((part) => part.trim().charAt(0));

    if (parts.length === 1) return parts[0];
    if (parts.length === 2) return {{ '`${parts[0]}${parts[1]}`' }};
    return {{ '`${parts[0]}${parts[parts.length - 1]}`' }};
  }


  @computed()
  public get lastActivity(): string {
    // TODO: This is a temporary solution to get the last activity date.
    // We should use the last activity date from the drafts table instead.
    const date = this.updatedAt || this.createdAt;
    const now = DateTime.now();
    const diff = now.diff(date, 'days').days;

    if (diff < 1) {
      return 'Today';
    } else if (diff < 2) {
      return 'Yesterday';
    } else if (diff < 7) {
      return date.toFormat('cccc');
    } else if (date.year === now.year) {
      const day = date.day;
      const ordinal =
        day === 1 || day === 21 || day === 31
          ? 'st'
          : day === 2 || day === 22
            ? 'nd'
            : day === 3 || day === 23
              ? 'rd'
              : 'th';
      return `${day}${ordinal} ${date.toFormat('MMMM')}`;
    } else {
      return date.toFormat('dd/MM/yy');
    }
  }


  @computed()
  public get meta(): UserMeta {
    return {
      id: this.id,
      name: this.name,
      email: this.email,
      role: this.role,
      language: this.language || 'en',
    };
  }
}

