{{{
  exports({ to: app.makePath('app/controllers/users_controller.ts') })
}}}
import type { HttpContext } from '@adonisjs/core/http';

import vine from '@vinejs/vine';
import { UsersProps } from '@story-cms/kit';
import User from '#models/user';
import Activity from '#models/activity';
import { UserService } from '#services/user_service';

import {
  createUserValidator,
  updateUserValidator
} from '#validators/user';

export default class UsersController {
  // show a list of all users
  public async index(ctx: HttpContext) {
    const userService = new UserService();
    const users = await userService.latest();

    const props: UsersProps = {
      users,
    };

    return ctx.inertia.render('UsersIndex', { ...props });
  }

  // patch a user's information
  public async update({ request, response, params, session, auth }: HttpContext) {
    const id = Number(params.id);
    const user = await User.findOrFail(id);

    try {
      const payload = await request.validateUsing(updateUserValidator);
      user.name = payload.name;
      user.email = payload.email;
      user.role = payload.role;
      user.language = payload.language;
      user.save();
      Activity.create({
        userId: auth.user?.id,
        locale: session.get('locale'),
        action: {{ '`updated user with id ${user.id}`' }},
      });
    } catch (e) {
      session.flash('errorsBag', { other: e.message });
    }

    return response.redirect('/user', false, 303);
  }

  // delete a user
  public async destroy({ response, params, session, auth }: HttpContext) {
    const id = Number(params.id);
    const user = await User.findOrFail(id);
    try {
      const random = Math.random().toString(36).substring(2, 15);
      user.name = 'redacted';
      user.email = {{ '`redacted+${random}`' }};
      user.save();
      await Activity.create({
        userId: auth.user?.id,
        locale: session.get('locale'),
        action: {{ '`deleted user with id ${user.id}`' }},
      });
    } catch (e) {
      session.flash('errorsBag', { other: e.message });
    }

    return response.redirect('/user', false, 303);
  }

  // create a new user
  public async store({ request, response, session, auth }: HttpContext) {
    const payload = await request.validateUsing(createUserValidator);

    try {
      const user = await User.create({ ...payload, password: 'pending' });
      await Activity.create({
        userId: auth.user?.id,
        locale: session.get('locale'),
        action: {{ '`created user with id ${user.id}`' }},
      });
    } catch (e) {
      // logger.error(e.message)
      session.flash('errorsBag', { other: e.message });
    }

    return response.redirect('/user', false, 303);
  }
}
