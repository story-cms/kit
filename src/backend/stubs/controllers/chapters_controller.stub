{{{
  exports({ to: app.makePath('app/controllers/chapters_controller.ts') })
}}}
import { apiContextFrom, storyContextFrom } from '#services/helpers';
import IndexService from '#services/index_service';
import type { HttpContext } from '@adonisjs/core/http';
import { AddStatus, PreviewProps, StoryIndexProps, Chapter } from '@story-cms/kit';
import edge from 'edge.js';
import { marked } from 'marked';

export default class ChaptersController {
  public async index(ctx: HttpContext) {
    const { story, version } = storyContextFrom(ctx);
    if (story === undefined) return ctx.response.notFound();

    const service = new IndexService(story);

    const addStatus: AddStatus = await service.getAddStatus(version);
    const index = await service.getItems(version);
    const props: StoryIndexProps = {
      index,
      addStatus,
      storyName: story.name,
      storyId: story.id,
    };

    return ctx.inertia.render('StoryIndex', { ...props });
  }

  public async preview(ctx: HttpContext) {
    const { story, version } = storyContextFrom(ctx);
    if (story === undefined) return ctx.response.notFound();

    const specifier = {
      apiVersion: version.apiVersion,
      locale: version.locale,
      storyId: story.id,
      number: Number(ctx.params.number),
    };

    const chapter = await Chapter.query().where(specifier).firstOrFail();
    const bundleView = await edge.render('preview', {
      bundle: chapter.bundle,
      marked: marked,
    });

    const props: PreviewProps = {
      chapter: chapter.meta,
      bundleView: bundleView,
      storyName: story.name,
      storyId: story.id,
      chapterLimit: story.chapterLimit,
      title: chapter.index.title,
      bundle: chapter.bundle,
    };

    return ctx.inertia.render('ChapterPreview', { ...props });
  }

  public async get(ctx: HttpContext) {
    const { version } = apiContextFrom(ctx);

    const specifier = {
      ...version,
      number: Number(ctx.params.number),
    };

    const chapter = await Chapter.query().where(specifier).firstOrFail();

    return { number: chapter.number, bundle: chapter.escapedBundle };
  }

  public async range(ctx: HttpContext) {
    const { version } = apiContextFrom(ctx);

    const page = ctx.request.qs()['page'] || 1;

    const chapters = await Chapter.query()
      .whereBetween('number', [ctx.params.from, ctx.params.to])
      .where(version)
      .orderBy('number', 'asc')
      .paginate(page, 20);

    return chapters;
  }
}
