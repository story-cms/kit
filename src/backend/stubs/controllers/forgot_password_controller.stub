{{{
  exports({ to: app.makePath('app/controllers/forgot_password_controller.ts') })
}}}
import { DateTime } from 'luxon';
import type { HttpContext } from '@adonisjs/core/http';
import config from '@adonisjs/core/services/config';
import string from '@adonisjs/core/helpers/string';
import mail from '@adonisjs/mail/services/main';
import cms from '@story-cms/kit/cms';
import { requestPasswordValidator, newPasswordValidator } from '#validators/auth';
import User from '#models/user';
import env from '#start/env';

export default class ForgotPasswordController {
  public async index(ctx: HttpContext) {
    return ctx.inertia.render('ForgotPassword', { ...cms.sharedProps(ctx) });
  }

  public async forgotPassword(ctx: HttpContext) {
    const payload = await ctx.request.validateUsing(requestPasswordValidator);

    // find the user
    const user = await User.findBy('email', payload.email);

    if (user === null) {
      ctx.session.flash('errorsBag', {
        email: ['Email not found.'],
      });
      return ctx.response.redirect().back();
    }

    // make and store a token
    const token = string.generateRandom(32);
    user.resetTokenCreatedAt = DateTime.now();
    user.resetToken = token;
    await user.save();

    // send the email
    try {
      const appUrl = ctx.request.completeUrl().split('/forgot-password')[0];
      const appName = config.get('story.meta.name');

      await mail.send((message) => {
        message
          .from(env.get('MAIL_FROM_ADDRESS', ''))
          .to(user.email)
          .subject('Password reset')
          .htmlView('emails/forget_password', {
            name: user.name,
            appName: appName,
            link: {{ '`${appUrl}/reset-password/${user.resetToken}`' }},
          });
      });
    } catch (err) {
      ctx.logger.error({ err }, 'Sending password reset email failed');
      ctx.session.flash('errorsBag', {
        email: ['We had trouble sending that email, please try again later.'],
      });

      return ctx.response.redirect().back();
    }

    return ctx.response.redirect().back();
  }

  public resetRequest(ctx: HttpContext) {
    return ctx.inertia.render('ResetPassword', { ...cms.sharedProps(ctx) });
  }

  public async resetPassword(ctx: HttpContext) {
    const token = ctx.params.token;
    const payload = await ctx.request.validateUsing(newPasswordValidator);

    // find the user
    const user = await User.findByOrFail('email', payload.email);

    // make sure that the user is not using an old link
    // after requesting the password recovery again
    const sameToken = token === user.resetToken;
    if (!sameToken || token === '') {
      ctx.session.flash('errorsBag', { token: 'Invalid Token' });
      return ctx.response.redirect().back();
    }

    // check if token is still valid (24 hour period)
    const tokenExpired = DateTime.utc().diff(user.resetTokenCreatedAt!).hours > 24;
    if (tokenExpired) {
      ctx.session.flash('errorsBag', {
        token: 'Token expired, please request another one',
      });
      return ctx.response.redirect().back();
    }

    // TODO: find a way to set it to null/undefined
    user.resetToken = '';

    user.password = payload.password;
    await user.save();

    return ctx.response
      .redirect()
      .withQs({ message: 'password_reset_success' })
      .toRoute('/login');
  }
}
