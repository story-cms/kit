{{{
  exports({ to: app.makePath('app/controllers/dashboard_controller.ts') })
}}}
import type { HttpContext } from '@adonisjs/core/http';
import vine from '@vinejs/vine';
import IndexService from '#services/index_service';
import storyConfig from '#config/story';
import { DashboardProps, AddStatus, Stats } from '@story-cms/kit';

import config from '#config/analytics';
import cache from '@adonisjs/cache/services/main';
import { Analytics } from '#services/analytics_service';

export default class DashboardController {
  private async getAnalyticsReport() {
    const cachedReport = await cache.get({ key: config.cacheKey });
    if (cachedReport) {
      return cachedReport;
    }
    const ga = new Analytics(config);
    const report = await ga.report(config.chapterCompletionReportKey);
    await cache.set({ key: config.cacheKey, value: report, ttl: '1h' });

    return report;
  }

  private calculateChange(current: number, previous: number) {
    const change = ((current - previous) / previous) * 100;
    return {
      change: Math.abs(change).toFixed(2) + '%',
      changeType: change >= 0 ? 'increase' : 'decrease',
    };
  }

  public async index(ctx: HttpContext) {
    if (!ctx.version || !ctx.story) return ctx.response.notFound();

    const version = ctx.version;
    const story = ctx.story;

    const service = new IndexService(story);

    const addStatus: AddStatus = await service.getAddStatus(ctx.version);
    const index = await service.getItems(version);

    let stats: Stats[] = [];
    try {
      const report = await this.getAnalyticsReport();

      stats = [
        {
          name: 'Total Installs',
          stat: report.totals[0].toLocaleString(),
          previousStat: report.totals[1].toLocaleString(),
          ...this.calculateChange(report.totals[0], report.totals[1]),
        },
        {
          name: 'Monthly Active Users',
          stat: report.totals[1].toLocaleString(),
          previousStat: report.totals[2].toLocaleString(),
          ...this.calculateChange(report.totals[1], report.totals[2]),
        },
        {
          name: 'Chapters Complete',
          stat: report.totals[2].toLocaleString(),
          previousStat: report.totals[3].toLocaleString(),
          ...this.calculateChange(report.totals[2], report.totals[3]),
        },
      ];
    } catch (error) {
      console.error(error);
      stats = [];
    }


    const props: DashboardProps = { index, addStatus, storyName: story.name, stats, };

    return ctx.inertia.render('DashboardIndex', { ...props });
  }

  public async switch(ctx: HttpContext) {
    const switchRequest = vine.compile(
      vine.object({
        language: vine.string().nullable(),
        story: vine.string().nullable(),
      }),
    );
    const payload = await switchRequest.validate(ctx.request.all());

    // set the locale if it has been provided
    if (payload.language) {
      const language =
        storyConfig.languages.find((lang) => lang.language === payload.language) ||
        storyConfig.languages[0];
      ctx.session.put('locale', language.locale);
    }

    // set the story if it has been provided
    if (payload.story) {
      const story =
        storyConfig.stories.find((item) => item.name === payload.story) ||
        storyConfig.stories[0];
      ctx.session.put('storyId', story.id);
    }

    // force a page relaod to refresh the stores
    return ctx.inertia.location('/');
  }
}
