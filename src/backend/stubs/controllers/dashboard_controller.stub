{{{
  exports({ to: app.makePath('app/controllers/dashboard_controller.ts') })
}}}
import type { HttpContext } from '@adonisjs/core/http';
import vine from '@vinejs/vine';
import Ui from '#models/ui';
import storyConfig from '#config/story';
import { DashboardProps, TranslationProgress, Progress } from '@story-cms/kit';
import Index from '#models/index';

export default class DashboardController {
    public async index(ctx: HttpContext) {
    if (!ctx.version || !ctx.story) return ctx.response.notFound();

    const story = ctx.story;

    const translationProgress: TranslationProgress[] = [];
    // exclude the source locale and sort alphabetically
    const languages = storyConfig.languages
      .filter((lang) => lang.locale !== 'en')
      .sort((a, b) => a.language.localeCompare(b.language));

       const index = await Index.all();

    const indexByLocale = index.reduce(
      (acc, item) => {
        acc[item.locale] = {
          name: 'Content',
          done: item.publishedList.length,
          draft: item.draftsList.length + item.issuesList.length,
          total: story.chapterLimit,
          lastUpdated: item.updatedAt.toString(),
        };
        return acc;
      },
      {} as Record<string, Progress>,
    );

    for (const language of languages) {
      const contentProgress = indexByLocale[language.locale] ?? {
        name: 'Content',
        done: 0,
        draft: 0,
        total: 0,
        lastUpdated: '',
      };

      const rows = await Ui.findManyBy({ locale: language.locale });
      const totalCount = rows.length;
      const done = rows.filter((row) => row.microCopy && !row.flag).length;
      const draft = rows.filter((row) => row.flag).length;

      translationProgress.push({
        locale: language.locale,
        language: language.language,
        progress: [
          contentProgress,
          {
            name: 'Interface',
            done,
            draft,
            total: totalCount,
            lastUpdated:
              rows
                .map((row) => row.updatedAt)
                .sort()
                .pop()
                ?.toString() ?? '',
          },
        ],
      });
    }

    const props: DashboardProps = {
      translationProgress,
    };

    return ctx.inertia.render('DashboardIndex', { ...props });
  }

  public async switch(ctx: HttpContext) {
    const switchRequest = vine.compile(
      vine.object({
        language: vine.string().nullable(),
        story: vine.string().nullable(),
      }),
    );
    const payload = await switchRequest.validate(ctx.request.all());

    // set the locale if it has been provided
    if (payload.language) {
      const language =
        storyConfig.languages.find((lang) => lang.language === payload.language) ||
        storyConfig.languages[0];
      ctx.session.put('locale', language.locale);
    }

    // set the story if it has been provided
    if (payload.story) {
      const story =
        storyConfig.stories.find((item) => item.name === payload.story) ||
        storyConfig.stories[0];
      ctx.session.put('storyId', story.id);
    }

    // force a page relaod to refresh the stores
    return ctx.inertia.location('/');
  }
}
