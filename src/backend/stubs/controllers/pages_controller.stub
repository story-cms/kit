{{{
  exports({ to: app.makePath('app/controllers/pages_controller.ts') })
}}}

import type { HttpContext } from '@adonisjs/core/http';

import Page, { PageVersion } from '#models/page';
import storyConfig from '#config/story';
import PageService from '#services/page_service';
import Activity from '#models/activity';
import ActivityService from '#services/activity_service';

import { Session } from '@adonisjs/session';
import providers from '#config/providers';
import { PageEditProps } from '@story-cms/kit';
import vine from '@vinejs/vine';

import { PageValidator, errorMessages } from '#validators/page';
import { trimmedErrors } from '#services/helpers';

export default class PagesController {
  private async logActivity(
    userId: number | undefined,
    locale: string,
    action: Activity['action'],
  ) {
    if (!userId) return;
    const activity = new ActivityService();
    await activity.logAction(userId, locale, 'page', action);
  }

  public async get({ request }: HttpContext) {
    const locale = request.qs()['locale'] || 'en';

    const service = new PageService({
      apiVersion: 1,
      locale: locale,
    });
    const items = await service.getPageItemsForClient();

    return { pages: items };
  }

  public async index({ inertia, session }: HttpContext) {
    const version = versionFromSession(session);
    const service = new PageService(version);
    const pages = await service.getPageItems();
    return inertia.render('PagesIndex', {
      pages: pages,
    });
  }

  public async edit({ inertia, params }: HttpContext) {
    const page = await Page.findOrFail(params.id);

    const props: PageEditProps = {
      providers: providers,
      page: page.meta,
      bundle: page.model,
    };

    return inertia.render('PagesEdit', { ...props });
  }

  public async create({ response, session, auth }: HttpContext) {
    const page = await Page.create({
      locale: session.get('locale') || 'en',
      apiVersion: storyConfig.pages.schemaVersion,
      order: 1,
      bundle: '{"group":1}',
      updatedBy: auth.user?.id,
    });

    await this.logActivity(auth.user?.id, session.get('locale'), 'create_page');
    return response.redirect({{ '`/page/${page.id}/edit`' }}, false, 303);
  }

  public async destroy({ params, response, session, auth }: HttpContext) {
    const id = Number(params.id);
    const page = await Page.findOrFail(id);
    try {
      await page.delete();
      await this.logActivity(auth.user?.id, session.get('locale'), 'delete_page');
    } catch (e) {
      session.flash('errorsBag', { other: e.message });
    }

    return response.redirect('/page', false, 303);
  }

  public async update(ctx: HttpContext) {
    let payload;
    try {
      // constructing the validator first so we can have a
      // dynamic getter for the schema property
      const data = ctx.request.all();
      vine.messagesProvider = errorMessages;

      const pageValidator = new PageValidator(ctx);
      payload = await pageValidator.schema.validate(data);
    } catch (e) {
      const errors = trimmedErrors(e);

      ctx.session.flash('errorsBag', prepend(errors));
      return ctx.response.redirect().back();
    }

    const id = Number(ctx.params.id);
    const page = await Page.findOrFail(id);

    page.updateBundle(payload);

    page.isPublished = payload.isPublished;
    await page.save();
    if (payload.isPublished) {
      await this.logActivity(
        ctx.auth.user?.id,
        ctx.session.get('locale'),
        'publish_page',
      );
    } else {
      await this.logActivity(
        ctx.auth.user?.id,
        ctx.session.get('locale'),
        'unpublish_page',
      );
    }

    return ctx.response.redirect().back();
  }

  public async sort({ response, request, session, auth }: HttpContext) {
    const version = versionFromSession(session);

    // use the service to sort the pages in memory
    const service = new PageService(version);
    const pages = await service.pagesFromItems(request.input('items'));

    // save all the pages
    for (const page of pages) {
      await page.save();
    }

     await this.logActivity(auth.user?.id, session.get('locale'), 'sort_page');

    return response.redirect().back();
  }
}

// The model store on the client requires that the error messages
// each have a "bundle" prefix
const prepend = (plain: Record<string, string[]>): Object => {
  const result: Record<string, unknown> = {};
  for (const key in plain) {
    result[{{ '`bundle.${key}`' }}] = plain[key];
  }
  return result;
};

const versionFromSession = (session: Session): PageVersion => {
  return {
    locale: session.get('locale') || 'en',
    apiVersion: storyConfig.pages.schemaVersion,
  } as PageVersion;
};
