{{{
  exports({ to: app.makePath('app/controllers/pages_controller.ts') })
}}}
import type { HttpContext } from '@adonisjs/core/http';
import vine from '@vinejs/vine';

import {
  Activity,
  Page,
  trimmedErrors,
  PageService,
  type PageEditProps,
  PageValidator,
  pageErrorMessages,
} from '@story-cms/kit';
import cms from '#services/cms';
import providers from '#config/providers';

export default class PagesController {
  public async get({ request }: HttpContext) {
    const locale = request.qs()['locale'] || 'en';

    const service = new PageService(
      {
        apiVersion: 1,
        locale: locale,
      },
      cms,
    );
    const items = await service.getPageItemsForClient();

    return { pages: items };
  }

  public async index(ctx: HttpContext) {
    const version = cms.pagesContextFrom(ctx);
    const service = new PageService(version, cms);
    const pages = await service.getPageItems();
    return ctx.inertia.render('PagesIndex', {
      pages: pages,
      ...cms.sharedProps(ctx),
    });
  }

  public async edit(ctx: HttpContext) {
    const page = await Page.findOrFail(ctx.params.id);

    const props: PageEditProps = {
      providers: providers,
      page: page.meta,
      bundle: page.model,
    };

    return ctx.inertia.render('PagesEdit', { ...props, ...cms.sharedProps(ctx) });
  }

  public async create(ctx: HttpContext) {
    const version = cms.pagesContextFrom(ctx);
    const page = await Page.create({
      locale: version.locale,
      apiVersion: cms.config.pages.schemaVersion,
      order: 1,
      bundle: '{"group":1}',
      updatedBy: ctx.auth.user?.id,
    });

    await Activity.create({
      userId: ctx.auth.user?.id,
      locale: version.locale,
      action: {{ '`created page ${page.id}`' }},
    });

    return ctx.response.redirect({{ '`/${version.locale}/page/${page.id}/edit`' }}, false, 303);
  }

  public async destroy(ctx: HttpContext) {
    const version = cms.pagesContextFrom(ctx);
    const id = Number(ctx.params.id);
    const page = await Page.findOrFail(id);
    try {
      await page.delete();
      await Activity.create({
        userId: ctx.auth.user?.id,
        locale: version.locale,
        action: {{ '`deleted page ${page.id}`' }},
      });
    } catch (e) {
      ctx.session.flash('errorsBag', { other: e.message });
    }

    return ctx.response.redirect({{ '`/${version.locale}/page`' }}, false, 303);
  }

  public async update(ctx: HttpContext) {
    const version = cms.pagesContextFrom(ctx);
    let payload;
    try {
      // constructing the validator first so we can have a
      // dynamic getter for the schema property
      const data = ctx.request.all();
      vine.messagesProvider = pageErrorMessages;

      const pageValidator = new PageValidator(ctx);
      payload = await pageValidator.schema.validate(data);
    } catch (e) {
      const errors = trimmedErrors(e);

      ctx.session.flash('errorsBag', prepend(errors));
      return ctx.response.redirect().back();
    }

    const id = Number(ctx.params.id);
    const page = await Page.findOrFail(id);

    page.updateBundle(payload);

    page.isPublished = payload.isPublished;
    await page.save();
    if (payload.isPublished) {
      await Activity.create({
        userId: ctx.auth.user?.id,
        locale: version.locale,
        action: {{ '`published page ${page.id}`' }},
      });
    } else {
      await Activity.create({
        userId: ctx.auth.user?.id,
        locale: version.locale,
        action: {{ '`updated page ${page.id}`' }},
      });
    }

    return ctx.response.redirect().back();
  }

  public async sort(ctx: HttpContext) {
    const version = cms.pagesContextFrom(ctx);

    // use the service to sort the pages in memory
    const service = new PageService(version, cms);
    const pages = await service.pagesFromItems(ctx.request.input('items'));

    // save all the pages
    for (const page of pages) {
      await page.save();
    }

    await Activity.create({
      userId: ctx.auth.user?.id,
      locale: version.locale,
      action: 'sorted pages',
    });

    return ctx.response.redirect().back();
  }
}

// The model store on the client requires that the error messages
// each have a "bundle" prefix
const prepend = (plain: Record<string, string[]>): Object => {
  const result: Record<string, unknown> = {};
  for (const key in plain) {
    result[{{ '`bundle.${key}`' }}] = plain[key];
  }
  return result;
};
