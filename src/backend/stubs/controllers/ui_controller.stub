{{{
  exports({ to: app.makePath('app/controllers/ui_controller.ts') })
}}}
import type { HttpContext } from '@adonisjs/core/http';

import storyConfig from '#config/story';
import { Activity } from '@story-cms/kit';
import { apiContextFrom, storyContextFrom } from '#services/helpers';
import { UiService } from '#services/ui_service';
import { UiPageProps, Version } from '@story-cms/kit';

export default class UisController {
  // render the UI page with the translation
  public async index(ctx: HttpContext) {
    const { version } = storyContextFrom(ctx);
    if (version === undefined) return ctx.response.notFound();

    const locale = version.locale;
    const service = new UiService(this.sourceLocale);
    const items = await service.items(locale);
    const props: UiPageProps = {
      items,
    };
    const errors = ctx.session.flashMessages.get('errorsBag') ?? {};

    return ctx.inertia.render('UiPage', { ...props, errors });
  }

  // API endpoint to get the translation for a specific locale
  public async translation(ctx: HttpContext) {
    const { version } = apiContextFrom(ctx);

    if (!version) return ctx.response.notFound();

    if (!this.isTranslation(version))
      return ctx.response.unprocessableEntity('Cannot download the source language');

    const service = new UiService(this.sourceLocale);
    const rendered = await service.translation(version.locale);

    return ctx.response.json(rendered);
  }

  // persist a translated item
  public async store(ctx: HttpContext) {
    const { version } = storyContextFrom(ctx);
    if (!version) return ctx.response.notFound();

    if (!this.isTranslation(version))
      return ctx.response.unprocessableEntity('Cannot store source language');

    const service = new UiService(version.locale);

    try {
      // use the service to validate and store the payload
      await service.store(version.locale, ctx.request.all());
      await Activity.create({
        userId: ctx.auth.user?.id,
        locale: version.locale,
        action: 'stored microcopy',
      });
    } catch (error) {
      return ctx.response.abort({ message: (error as Error).message }, 422);
    }
  }

  public async translateBulk(ctx: HttpContext) {
    const { version } = storyContextFrom(ctx);
    if (!version) return ctx.response.notFound();

    if (!this.isTranslation(version)) {
      return ctx.response.unprocessableEntity('Cannot translate source language');
    }

    const service = new UiService(this.sourceLocale);

    try {
      const count = await service.fillMissing(version.locale);

      await Activity.create({
        userId: ctx.auth.user?.id,
        locale: version.locale,
        action: {{ '`bulk translated ${count} items`' }},
      });
    } catch (error) {
      return ctx.response.internalServerError({ error: 'Failed to translate items' });
    }
    return ctx.response.redirect().back();
  }

  public async suggest(ctx: HttpContext) {
    const { version } = storyContextFrom(ctx);
    if (!version) return ctx.response.notFound();

    if (!this.isTranslation(version)) {
      return ctx.response.unprocessableEntity('Cannot suggest translation');
    }

    const key = ctx.request.input('key');
    const service = new UiService(this.sourceLocale);
    const suggestion = await service.suggest(version.locale, key);

    return ctx.response.json({ suggestion });
  }

  public async flag(ctx: HttpContext) {
    const { version } = storyContextFrom(ctx);
    if (!version) return ctx.response.notFound();

    const service = new UiService(version.locale);
    try {
      await service.flag(
        version.locale,
        ctx.request.input('key'),
        ctx.request.input('state'),
      );

      await Activity.create({
        userId: ctx.auth.user?.id,
        locale: version.locale,
        action: 'flagged microcopy',
      });
    } catch (error) {
      return ctx.response.internalServerError();
    }

    return ctx.response.finish();
  }

  // API endpoint to trigger a pull the source phrases from project repository
  public async pull({ request, response }: HttpContext) {
    const token = request.qs().token;
    if (!token) {
      return response.notFound();
    }

    const service = new UiService(this.sourceLocale);
    try {
      const result = await service.pull(token);
      return response.json(result);
    } catch (error) {
      return response.internalServerError();
    }
  }

  protected isTranslation(version: Version | undefined): boolean {
    const locale = version?.locale;
    return locale !== this.sourceLocale;
  }

  protected get sourceLocale(): string {
    return storyConfig.languages[0].locale;
  }
}
