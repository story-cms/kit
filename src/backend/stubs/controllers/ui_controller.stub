{{{
  exports({ to: app.makePath('app/controllers/ui_controller.ts') })
}}}
import type { HttpContext } from '@adonisjs/core/http';
import { UiService, UiValidationError } from '#services/ui_service';
import { UiPageProps } from '@story-cms/kit';
import storyConfig from '#config/story';

export default class UisController {
  // render the UI page with the translation
  public async index(ctx: HttpContext) {
    if (!ctx.version) return ctx.response.notFound();
    const locale = ctx.version.locale;
    const service = new UiService(this.sourceLocale);

    if (!this.isTranslation(ctx)) {
      const progress = await service.progress();
      const props = { progress };
      return ctx.inertia.render('UiIndex', { ...props });
    }

    const items = await service.items(locale);
    const props: UiPageProps = {
      items,
    };
    return ctx.inertia.render('UiPage', { ...props });
  }

  // API endpoint to get the translation for a specific locale
  public async translation(ctx: HttpContext) {
    if (!ctx.version) return ctx.response.notFound();

    if (!this.isTranslation(ctx))
      return ctx.response.unprocessableEntity('Cannot download the source language');

    const service = new UiService(this.sourceLocale);
    const rendered = await service.translation(ctx.version.locale);

    return ctx.response.json(rendered);
  }

  // persist a set of phrases for a translation
  public async store(ctx: HttpContext) {
    if (!ctx.version) return ctx.response.notFound();

    if (!this.isTranslation(ctx))
      return ctx.response.unprocessableEntity('Cannot store source language');

    const locale = ctx.version.locale;
    const service = new UiService(locale);

    try {
      // validate the payload
      const valid = await service.validate(ctx.request.all());

      // use the service to store the payload
      await service.store(locale, valid);

      // return the result
    } catch (error) {
      if (error instanceof UiValidationError) {
        ctx.session.flash('errors', error.messages);
      } else {
        ctx.session.flash('errors', error.message);
      }
    }

    return ctx.response.redirect().back();
  }

  // API endpoint to trigger a pull the source phrases from project repository
  public async pull({ request, response }: HttpContext) {
    const token = request.qs().token;
    if (!token) {
      return response.notFound();
    }

    const service = new UiService(this.sourceLocale);
    try {
      const result = await service.pull(token);
      return response.json(result);
    } catch (error) {
      console.error(error);
      return response.internalServerError();
    }
  }

  protected isTranslation(ctx: HttpContext) {
    const locale = ctx.version?.locale;
    return locale !== this.sourceLocale;
  }

  protected get sourceLocale(): string {
    return storyConfig.languages[0].locale;
  }
}
