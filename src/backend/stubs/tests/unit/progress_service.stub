{{{ 
  exports({ to: app.makePath('tests/unit/progress_service.spec.ts') }) 
}}}
import { test } from '@japa/runner';
import testUtils from '@adonisjs/core/services/test_utils';
import { User, ProgressService, Ui, Index, type UserInterface } from '@story-cms/kit';

test.group('ProgressService', (group) => {
  group.each.setup(() => testUtils.db().withGlobalTransaction());

  test('returns translation progress for all non-english languages', async ({
    assert,
  }) => {
    // 1. arrange
    const service = new ProgressService(cms);

    // Create user
    const user = await User.create({
      id: 1,
      name: 'Test User',
      email: 'test@test.com',
      password: 'password',
      language: '*',
    });

    // Create test data
    await Index.createMany([
      {
        locale: 'es',
        apiVersion: 1,
        publishedList: [1, 2],
        draftsList: [2, 3],
        issuesList: [4],
        items: { root: [] },
        storyId: 1,
      },
      {
        locale: 'en',
        apiVersion: 1,
        publishedList: [
          1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 17, 18, 19, 11, 13, 15, 20, 21, 22,
          23, 24, 25, 26, 27, 28, 33, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42,
        ],
        draftsList: [3],
        issuesList: [4],
        items: { root: [] },
        storyId: 1,
      },
      {
        locale: 'en',
        apiVersion: 1,
        publishedList: [1, 2, 3, 4, 5, 7, 8, 9, 10, 11],
        draftsList: [3],
        issuesList: [4],
        items: { root: [] },
        storyId: 2,
      },
    ]);

    await Ui.createMany([
      {
        locale: 'es',
        key: 'test1',
        microCopy: 'Test 1',
        flag: null,
        updatedBy: 1,
      },
      {
        locale: 'es',
        key: 'test2',
        microCopy: 'Test 2',
        flag: 'recheck',
        updatedBy: 1,
      },
      {
        locale: 'es',
        key: 'test3',
        microCopy: 'Test 3',
        flag: 'prefilled',
        updatedBy: 1,
      },
      {
        locale: 'en',
        key: 'test1',
        microCopy: 'Test 1',
        flag: null,
        updatedBy: 1,
      },
      {
        locale: 'en',
        key: 'test2',
        microCopy: 'Test 2',
        flag: null,
        updatedBy: 1,
      },
      {
        locale: 'en',
        key: 'test3',
        microCopy: 'Test 3',
        flag: null,
        updatedBy: 1,
      },
      {
        locale: 'en',
        key: 'test4',
        microCopy: 'Test 4',
        flag: null,
        updatedBy: 1,
      },
      {
        locale: 'en',
        key: 'test5',
        microCopy: 'Test 5',
        flag: null,
        updatedBy: 1,
      },
    ]);

    // 2. act
    const result = await service.progress(user as UserInterface);

    // 3. assert
    assert.isArray(result);

    // Find Spanish progress
    const spanishProgress = result.find((p) => p.locale === 'es');
    assert.exists(spanishProgress);

    if (spanishProgress) {
      // Check content progress
      const contentProgress = spanishProgress.progress.find((p) => p.name === 'Content');
      assert.exists(contentProgress);
      if (contentProgress) {
        assert.equal(contentProgress.done, 2); // publishedList length
        assert.equal(contentProgress.draft, 1); // unpublished draft
        // Total items in the published for all English stories
        assert.equal(contentProgress.total, 52);
      }

      // Check interface progress
      const interfaceProgress = spanishProgress.progress.find(
        (p) => p.name === 'Interface',
      );
      assert.exists(interfaceProgress);
      if (interfaceProgress) {
        assert.equal(interfaceProgress.done, 1); // one non-flagged item
        assert.equal(interfaceProgress.draft, 1); // one ai item
        assert.equal(interfaceProgress.total, 5); // total items
      }
    }

    const burmeseProgress = result.find((p) => p.locale === 'my');
    assert.exists(burmeseProgress);

    if (burmeseProgress) {
      const contentProgress = burmeseProgress.progress.find((p) => p.name === 'Content');
      assert.exists(contentProgress);

      if (contentProgress) {
        assert.equal(contentProgress.done, 0); // publishedList length
        assert.equal(contentProgress.draft, 0); // unpublished draft
        // Total items in the published for all English stories
        assert.equal(contentProgress.total, 52);
      }

      const interfaceProgress = burmeseProgress.progress.find(
        (p) => p.name === 'Interface',
      );
      assert.exists(interfaceProgress);
      if (interfaceProgress) {
        assert.equal(interfaceProgress.done, 0); // one non-flagged item
        assert.equal(interfaceProgress.draft, 0); // one ai item
        assert.equal(interfaceProgress.total, 5); // total items
      }
    }
  }).skip();
});
